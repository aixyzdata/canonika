#!/bin/bash

echo "üß™ TESTE DO FLUXO COMPLETO DE NAVEGA√á√ÉO"
echo "=========================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para testar endpoint
test_endpoint() {
    local url=$1
    local description=$2
    
    echo -e "\n${BLUE}üîç Testando: $description${NC}"
    echo "URL: $url"
    
    # Testar se responde
    if curl -s -o /dev/null -w "%{http_code}" "$url" | grep -q "200"; then
        echo -e "${GREEN}‚úÖ OK - Responde com 200${NC}"
        
        # Verificar se √© HTML
        content_type=$(curl -s -I "$url" | grep -i "content-type" | head -1)
        if echo "$content_type" | grep -q "text/html"; then
            echo -e "${GREEN}‚úÖ OK - Content-Type: text/html${NC}"
            
            # Verificar se tem elementos b√°sicos do HTML
            html_content=$(curl -s "$url")
            if echo "$html_content" | grep -q "<!DOCTYPE html>"; then
                echo -e "${GREEN}‚úÖ OK - HTML v√°lido${NC}"
                
                # Verificar se tem t√≠tulo
                title=$(echo "$html_content" | grep -i "<title>" | head -1)
                if [ ! -z "$title" ]; then
                    echo -e "${GREEN}‚úÖ OK - T√≠tulo encontrado: $title${NC}"
                else
                    echo -e "${YELLOW}‚ö†Ô∏è  Aviso - T√≠tulo n√£o encontrado${NC}"
                fi
            else
                echo -e "${RED}‚ùå ERRO - HTML inv√°lido${NC}"
                return 1
            fi
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Aviso - Content-Type n√£o √© text/html: $content_type${NC}"
        fi
    else
        echo -e "${RED}‚ùå ERRO - N√£o responde com 200${NC}"
        return 1
    fi
    
    return 0
}

# Fun√ß√£o para testar redirecionamento
test_redirect() {
    local from_url=$1
    local expected_redirect=$2
    local description=$3
    
    echo -e "\n${BLUE}üîÑ Testando redirecionamento: $description${NC}"
    echo "De: $from_url"
    echo "Para: $expected_redirect"
    
    # Simular redirecionamento (verificar se a p√°gina tem JavaScript que redireciona)
    html_content=$(curl -s "$from_url")
    
    if echo "$html_content" | grep -q "redirectToQuarter\|window.location.href"; then
        echo -e "${GREEN}‚úÖ OK - C√≥digo de redirecionamento encontrado${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Aviso - C√≥digo de redirecionamento n√£o encontrado${NC}"
    fi
}

echo -e "\n${YELLOW}üìã INICIANDO TESTES...${NC}"

# 1. Testar Harbor (3701)
test_endpoint "http://localhost:3701/" "Harbor - Dashboard Principal"

# 2. Testar Quarter (3700)
test_endpoint "http://localhost:3700/" "Quarter - Sistema de Autentica√ß√£o"

# 3. Testar Beacon (3703)
test_endpoint "http://localhost:3703/" "Beacon - WebSocket Broker"

# 4. Testar redirecionamentos
test_redirect "http://localhost:3701/" "http://localhost:3700/" "Harbor -> Quarter"
test_redirect "http://localhost:3703/" "http://localhost:3700/" "Beacon -> Quarter"

echo -e "\n${GREEN}üéâ TESTE COMPLETO FINALIZADO!${NC}"
echo -e "\n${YELLOW}üìù INSTRU√á√ïES PARA TESTE MANUAL:${NC}"
echo "1. Acesse: http://localhost:3701/"
echo "2. Voc√™ deve ser redirecionado para: http://localhost:3700/"
echo "3. Fa√ßa login com: admin@canonika.io / admin123"
echo "4. Voc√™ deve ser redirecionado de volta para: http://localhost:3701/"
echo "5. Verifique se o conte√∫do do Harbor est√° completo e funcional" 