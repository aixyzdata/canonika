const puppeteer = require('puppeteer');

async function testVueLogin() {
  console.log('üîç Testando login atrav√©s da inst√¢ncia do Vue...');
  
  const browser = await puppeteer.launch({
    headless: false,
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });
  
  try {
    const page = await browser.newPage();
    
    // Capturar logs do console
    page.on('console', msg => {
      console.log('Console:', msg.text());
    });
    
    page.on('pageerror', error => {
      console.log('Page Error:', error.message);
    });
    
    console.log('üìç Navegando para Harbor...');
    await page.goto('http://localhost:3701/', { waitUntil: 'networkidle2', timeout: 15000 });
    
    console.log('üìç URL atual:', page.url());
    
    // Aguardar um pouco para carregar
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // Verificar se o login est√° presente
    const loginForm = await page.$('.login-form');
    if (loginForm) {
      console.log('‚úÖ Formul√°rio de login encontrado');
      
      // Tentar acessar a inst√¢ncia do Vue e simular login
      console.log('üîç Simulando login atrav√©s da inst√¢ncia do Vue...');
      const loginResult = await page.evaluate(() => {
        if (window.app && window.app.__vue_app__) {
          const vueApp = window.app.__vue_app__;
          console.log('Inst√¢ncia do Vue encontrada:', vueApp);
          
          // Verificar se a inst√¢ncia tem o m√©todo login
          if ('login' in vueApp) {
            console.log('M√©todo login encontrado');
            vueApp.login();
            return { success: true, method: 'login' };
          } else {
            console.log('M√©todo login n√£o encontrado');
            
            // Verificar se tem o user
            if ('user' in vueApp) {
              console.log('User encontrado:', vueApp.user);
              
              // Simular login definindo o user diretamente
              vueApp.user = {
                id: 'admin-001',
                name: 'Administrador',
                email: 'admin@canonika.io',
                roles: ['admin']
              };
              
              console.log('User definido:', vueApp.user);
              return { success: true, method: 'direct' };
            } else {
              console.log('User n√£o encontrado');
              return { success: false, error: 'User n√£o encontrado' };
            }
          }
        } else {
          console.log('Inst√¢ncia do Vue n√£o encontrada');
          return { success: false, error: 'Inst√¢ncia do Vue n√£o encontrada' };
        }
      });
      
      console.log('üîç Resultado do login:', loginResult);
      
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Verificar se o login form desapareceu
      const loginFormAfter = await page.$('.login-form');
      if (!loginFormAfter) {
        console.log('‚úÖ Formul√°rio de login desapareceu ap√≥s login via inst√¢ncia do Vue');
      } else {
        console.log('‚ùå Formul√°rio de login ainda presente ap√≥s login via inst√¢ncia do Vue');
      }
      
      // Verificar se o sidebar apareceu
      const sidebar = await page.$('.sidebar');
      if (sidebar) {
        console.log('‚úÖ Sidebar apareceu ap√≥s login via inst√¢ncia do Vue');
      } else {
        console.log('‚ùå Sidebar n√£o apareceu ap√≥s login via inst√¢ncia do Vue');
      }
      
      // Verificar se o router-view est√° presente
      const routerView = await page.$('[data-v-router-view]');
      if (routerView) {
        console.log('‚úÖ Router-view encontrado ap√≥s login via inst√¢ncia do Vue');
      } else {
        console.log('‚ùå Router-view n√£o encontrado ap√≥s login via inst√¢ncia do Vue');
        
        // Verificar se h√° algum elemento com router-view
        const allElements = await page.$$('*');
        console.log('üîç Total de elementos na p√°gina:', allElements.length);
        
        // Verificar se h√° algum elemento com data-v-router-view
        const routerElements = await page.$$('[data-v-router-view]');
        console.log('üîç Elementos com data-v-router-view:', routerElements.length);
        
        // Verificar se h√° algum elemento com router-view
        const routerViewElements = await page.$$('router-view');
        console.log('üîç Elementos router-view:', routerViewElements.length);
        
        // Verificar se h√° algum elemento com router-container
        const routerContainerElements = await page.$$('.router-container');
        console.log('üîç Elementos .router-container:', routerContainerElements.length);
        
        // Verificar se h√° algum elemento com v-if="user"
        const userConditionElements = await page.$$('[v-if="user"]');
        console.log('üîç Elementos com v-if="user":', userConditionElements.length);
      }
      
      // Verificar se o Explorer est√° presente
      const explorerLink = await page.$('a[href="/explorer"]');
      if (explorerLink) {
        console.log('‚úÖ Link do Explorer encontrado ap√≥s login via inst√¢ncia do Vue');
        
        // Clicar no Explorer
        console.log('üîç Clicando no Explorer...');
        await explorerLink.click();
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        console.log('üìç URL ap√≥s clique:', page.url());
        
        // Verificar se a p√°gina do Explorer carregou
        const explorerContent = await page.$('.explorer-content');
        if (explorerContent) {
          console.log('‚úÖ P√°gina do Explorer carregou corretamente');
        } else {
          console.log('‚ùå P√°gina do Explorer n√£o carregou');
          
          // Verificar se h√° algum erro
          const errorElement = await page.$('.error');
          if (errorElement) {
            const errorText = await page.evaluate(el => el.textContent, errorElement);
            console.log('‚ùå Erro encontrado:', errorText);
          }
          
          // Verificar se h√° algum elemento com explorer
          const explorerElements = await page.$$('[class*="explorer"]');
          console.log('üîç Elementos com explorer:', explorerElements.length);
        }
      } else {
        console.log('‚ùå Link do Explorer n√£o encontrado ap√≥s login via inst√¢ncia do Vue');
      }
      
    } else {
      console.log('‚ùå Formul√°rio de login n√£o encontrado');
    }
    
  } catch (error) {
    console.error('‚ùå Erro:', error.message);
  } finally {
    await browser.close();
  }
  
  console.log('üèÅ Teste finalizado');
}

testVueLogin(); 