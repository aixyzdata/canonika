const puppeteer = require('puppeteer');

async function testVueImportError() {
  console.log('üîç Testando erro espec√≠fico na importa√ß√£o do Vue...');
  
  const browser = await puppeteer.launch({
    headless: false,
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });
  
  try {
    const page = await browser.newPage();
    
    // Capturar TODOS os logs do console
    page.on('console', msg => {
      console.log('Console:', msg.text());
    });
    
    page.on('pageerror', error => {
      console.log('Page Error:', error.message);
    });
    
    console.log('üìç Navegando para Harbor...');
    await page.goto('http://localhost:3701/', { waitUntil: 'networkidle2', timeout: 15000 });
    
    console.log('üìç URL atual:', page.url());
    
    // Aguardar um pouco para carregar
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    // Verificar se h√° algum erro espec√≠fico na importa√ß√£o do Vue
    const vueImportErrorCheck = await page.evaluate(() => {
      console.log('Verificando erro espec√≠fico na importa√ß√£o do Vue...');
      
      // Verificar se h√° algum erro espec√≠fico na importa√ß√£o
      const errors = [];
      
      // Interceptar erros
      window.addEventListener('error', (event) => {
        errors.push({
          message: event.message,
          filename: event.filename,
          lineno: event.lineno,
          colno: event.colno
        });
      });
      
      // Verificar se o Vue est√° dispon√≠vel
      if (typeof window.Vue !== 'undefined') {
        console.log('Vue dispon√≠vel globalmente');
        return {
          vueAvailable: true,
          errors: errors
        };
      } else {
        console.log('Vue n√£o dispon√≠vel globalmente');
        
        // Verificar se h√° algum erro espec√≠fico na importa√ß√£o
        if (window.vueImportError) {
          console.log('Erro na importa√ß√£o do Vue:', window.vueImportError);
          errors.push({ message: window.vueImportError });
        }
        
        // Verificar se h√° algum erro espec√≠fico na importa√ß√£o do Vue Router
        if (window.vueRouterImportError) {
          console.log('Erro na importa√ß√£o do Vue Router:', window.vueRouterImportError);
          errors.push({ message: window.vueRouterImportError });
        }
        
        // Verificar se h√° algum erro espec√≠fico na importa√ß√£o do routes
        if (window.routesImportError) {
          console.log('Erro na importa√ß√£o do routes:', window.routesImportError);
          errors.push({ message: window.routesImportError });
        }
        
        return {
          vueAvailable: false,
          errors: errors
        };
      }
    });
    
    console.log('üîç Verifica√ß√£o de erro na importa√ß√£o do Vue:', vueImportErrorCheck);
    
    // Se o Vue n√£o est√° dispon√≠vel, tentar import√°-lo manualmente
    if (!vueImportErrorCheck.vueAvailable) {
      console.log('üîç Tentando importar o Vue manualmente...');
      
      const manualVueImport = await page.evaluate(() => {
        try {
          // Tentar importar o Vue manualmente
          console.log('Tentando importar o Vue manualmente...');
          
          // Verificar se h√° algum script do Vue carregado
          const vueScripts = document.querySelectorAll('script[src*="vue"]');
          console.log('Scripts do Vue encontrados:', vueScripts.length);
          
          // Verificar se h√° algum script do Vue Router carregado
          const vueRouterScripts = document.querySelectorAll('script[src*="vue-router"]');
          console.log('Scripts do Vue Router encontrados:', vueRouterScripts.length);
          
          // Verificar se h√° algum script principal carregado
          const mainScripts = document.querySelectorAll('script[src*="index-"]');
          console.log('Scripts principais encontrados:', mainScripts.length);
          
          return {
            vueScripts: vueScripts.length,
            vueRouterScripts: vueRouterScripts.length,
            mainScripts: mainScripts.length
          };
        } catch (error) {
          console.log('Erro ao verificar scripts:', error.message);
          return { error: error.message };
        }
      });
      
      console.log('üîç Verifica√ß√£o de scripts:', manualVueImport);
    }
    
  } catch (error) {
    console.error('‚ùå Erro:', error.message);
  } finally {
    await browser.close();
  }
  
  console.log('üèÅ Teste finalizado');
}

testVueImportError(); 