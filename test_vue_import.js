const puppeteer = require('puppeteer');

async function testVueImport() {
  console.log('üîç Testando importa√ß√£o do Vue...');
  
  const browser = await puppeteer.launch({
    headless: false,
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });
  
  try {
    const page = await browser.newPage();
    
    // Capturar logs do console
    page.on('console', msg => {
      console.log('Console:', msg.text());
    });
    
    page.on('pageerror', error => {
      console.log('Page Error:', error.message);
    });
    
    console.log('üìç Navegando para Harbor...');
    await page.goto('http://localhost:3701/', { waitUntil: 'networkidle2', timeout: 15000 });
    
    console.log('üìç URL atual:', page.url());
    
    // Aguardar um pouco para carregar
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // Verificar se h√° algum erro espec√≠fico na importa√ß√£o do Vue
    const vueImportCheck = await page.evaluate(() => {
      if (window.app) {
        console.log('App Vue encontrado');
        
        // Verificar se h√° algum erro espec√≠fico na importa√ß√£o do Vue
        if (window.vueImportError) {
          console.log('Erro na importa√ß√£o do Vue:', window.vueImportError);
        }
        
        // Verificar se h√° algum erro espec√≠fico na importa√ß√£o do Vue Router
        if (window.vueRouterImportError) {
          console.log('Erro na importa√ß√£o do Vue Router:', window.vueRouterImportError);
        }
        
        // Verificar se h√° algum erro espec√≠fico na importa√ß√£o do routes
        if (window.routesImportError) {
          console.log('Erro na importa√ß√£o do routes:', window.routesImportError);
        }
        
        // Verificar se h√° algum erro espec√≠fico na cria√ß√£o do router
        if (window.routerCreationError) {
          console.log('Erro na cria√ß√£o do router:', window.routerCreationError);
        }
        
        // Verificar se h√° algum erro espec√≠fico na aplica√ß√£o do router
        if (window.routerApplicationError) {
          console.log('Erro na aplica√ß√£o do router:', window.routerApplicationError);
        }
        
        return {
          appExists: true,
          vueImportError: window.vueImportError || null,
          vueRouterImportError: window.vueRouterImportError || null,
          routesImportError: window.routesImportError || null,
          routerCreationError: window.routerCreationError || null,
          routerApplicationError: window.routerApplicationError || null
        };
      } else {
        console.log('App Vue n√£o encontrado');
        return {
          appExists: false,
          vueImportError: null,
          vueRouterImportError: null,
          routesImportError: null,
          routerCreationError: null,
          routerApplicationError: null
        };
      }
    });
    
    console.log('üîç Verifica√ß√£o de importa√ß√£o do Vue:', vueImportCheck);
    
    // Se h√° erros, tentar recriar o router manualmente
    if (vueImportCheck.appExists && !vueImportCheck.vueImportError && !vueImportCheck.vueRouterImportError) {
      console.log('üîç Tentando recriar o router manualmente...');
      
      const manualRouterCreation = await page.evaluate(() => {
        try {
          // Tentar criar um router manualmente
          if (window.app) {
            console.log('Tentando criar router manualmente...');
            
            // Verificar se o Vue est√° dispon√≠vel
            if (typeof window.Vue !== 'undefined') {
              console.log('Vue dispon√≠vel');
              
              // Verificar se o Vue Router est√° dispon√≠vel
              if (typeof window.VueRouter !== 'undefined') {
                console.log('VueRouter dispon√≠vel');
                
                // Tentar criar um router simples
                const testRouter = window.VueRouter.createRouter({
                  history: window.VueRouter.createWebHistory(),
                  routes: []
                });
                
                console.log('Router de teste criado com sucesso');
                
                // Tentar aplicar o router ao app
                window.app.use(testRouter);
                
                console.log('Router aplicado com sucesso');
                
                return { success: true, error: null };
              } else {
                console.log('VueRouter n√£o dispon√≠vel');
                return { success: false, error: 'VueRouter n√£o dispon√≠vel' };
              }
            } else {
              console.log('Vue n√£o dispon√≠vel');
              return { success: false, error: 'Vue n√£o dispon√≠vel' };
            }
          } else {
            console.log('App n√£o encontrado');
            return { success: false, error: 'App n√£o encontrado' };
          }
        } catch (error) {
          console.log('Erro ao criar router manualmente:', error.message);
          return { success: false, error: error.message };
        }
      });
      
      console.log('üîç Cria√ß√£o manual do router:', manualRouterCreation);
    }
    
  } catch (error) {
    console.error('‚ùå Erro:', error.message);
  } finally {
    await browser.close();
  }
  
  console.log('üèÅ Teste finalizado');
}

testVueImport(); 