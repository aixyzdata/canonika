const puppeteer = require("puppeteer"); async function testFluxoCompleto() { console.log("🚀 Iniciando teste do fluxo completo..."); const browser = await puppeteer.launch({ headless: false, args: ["--no-sandbox", "--disable-setuid-sandbox"] }); try { const page = await browser.newPage(); page.on("console", msg => { console.log("📱 Console:", msg.text()); }); console.log("📍 Navegando para Harbor..."); await page.goto("http://localhost:3701", { waitUntil: "networkidle2" }); await new Promise(resolve => setTimeout(resolve, 2000)); console.log("📍 URL atual:", page.url()); if (page.url().includes("localhost:3700")) { console.log("✅ Redirecionamento para Quarter funcionou"); await new Promise(resolve => setTimeout(resolve, 2000)); console.log("📝 Preenchendo formulário..."); await page.type("input[type=\"email\"]", "admin@canonika.io"); await page.type("input[type=\"password\"]", "admin123"); console.log("🖱️ Clicando no botão de login..."); await page.click("button[type=\"submit\"]"); await new Promise(resolve => setTimeout(resolve, 5000)); console.log("📍 URL após login:", page.url()); if (page.url().includes("localhost:3701")) { console.log("✅ Fluxo completo funcionou!"); const cookies = await page.cookies(); const authCookie = cookies.find(c => c.name === "canonika_authenticated"); console.log("🍪 Cookie de autenticação:", authCookie ? "Encontrado" : "Não encontrado"); } else { console.log("❌ Não foi redirecionado para Harbor após login"); } } else { console.log("❌ Não foi redirecionado para Quarter"); } } catch (error) { console.error("❌ Erro:", error); } finally { await browser.close(); console.log("🏁 Teste finalizado"); } } testFluxoCompleto();
