const puppeteer = require('puppeteer');

async function testLogoutFinal() {
  console.log('üö™ Testando logout final...');
  
  const browser = await puppeteer.launch({
    headless: false,
    slowMo: 1000
  });
  
  try {
    const page = await browser.newPage();
    
    // 1. Fazer login
    console.log('\nüìç Passo 1: Fazendo login...');
    await page.goto('http://localhost:3700', { waitUntil: 'networkidle0' });
    await page.waitForSelector('.login-form', { timeout: 10000 });
    await page.click('.login-btn');
    
    // Aguardar redirecionamento para Harbor
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    const harborUrl = page.url();
    console.log('üìç URL ap√≥s login:', harborUrl);
    
    if (harborUrl.includes('localhost:3701')) {
      console.log('‚úÖ Login bem-sucedido');
      
      // 2. Verificar se est√° autenticado
      console.log('\nüìç Passo 2: Verificando autentica√ß√£o...');
      await page.waitForSelector('.user-info', { timeout: 10000 });
      const userInfo = await page.$eval('.user-info', el => el.textContent);
      console.log('üë§ Usu√°rio autenticado:', userInfo);
      
      // 3. Clicar no bot√£o de logout
      console.log('\nüìç Passo 3: Clicando em logout...');
      await page.waitForSelector('.logout-btn', { timeout: 10000 });
      await page.click('.logout-btn');
      
      // Aguardar o processo de logout
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // 4. Verificar se foi redirecionado para Quarter
      const finalUrl = page.url();
      console.log('üìç URL ap√≥s logout:', finalUrl);
      
      if (finalUrl.includes('localhost:3700')) {
        console.log('‚úÖ Logout bem-sucedido - Redirecionado para Quarter');
        
        // 5. Verificar se n√£o h√° tokens na URL
        if (!finalUrl.includes('auth_token')) {
          console.log('‚úÖ URL limpa - Sem tokens');
        } else {
          console.log('‚ö†Ô∏è URL ainda cont√©m tokens');
        }
        
        // 6. Tentar acessar Harbor novamente (deve redirecionar para Quarter)
        console.log('\nüìç Passo 4: Tentando acessar Harbor novamente...');
        await page.goto('http://localhost:3701', { waitUntil: 'networkidle0' });
        
        const redirectUrl = page.url();
        console.log('üìç URL ap√≥s tentativa de acesso:', redirectUrl);
        
        if (redirectUrl.includes('localhost:3700')) {
          console.log('‚úÖ Prote√ß√£o funcionando - Redirecionado para Quarter');
        } else {
          console.log('‚ùå Prote√ß√£o falhou - Ainda no Harbor');
        }
        
      } else {
        console.log('‚ùå Logout falhou - N√£o foi redirecionado para Quarter');
      }
      
    } else {
      console.log('‚ùå Login falhou');
    }
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  } finally {
    await browser.close();
  }
}

testLogoutFinal().catch(console.error); 